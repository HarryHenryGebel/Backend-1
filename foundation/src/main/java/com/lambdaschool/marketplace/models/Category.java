package com.lambdaschool.marketplace.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
@Table(name = "categories")
public class Category extends Auditable{
    /**
     * The primary key (long) of the items table.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long categoryId;

    /**
     * Item name. Cannot be null.
     */
    @Column(nullable = false)
    private String name;

    @OneToMany(mappedBy = "subcategory", cascade = CascadeType.ALL, orphanRemoval = true)
    @JsonIgnoreProperties(value = "subcategory", allowSetters = true)
    private List<Subcategory> subcategoryList = new ArrayList<>();

    /**
     * Default constructor used primarily by the JPA.
     */
    public Category() {
    }

    /**
     * Give the params, create a new category object
     * <p>
     * categoryId is autogenerated
     *
     * @param name The name (String) of the category
     */
    public Category(String name) {
        this.name = name;
    }

    /**
     * Getter for categoryId
     *
     * @return the categoryId (long) of the category
     */
    public long getCategoryId() {
        return categoryId;
    }

    /**
     * Setter for categoryId. Used primary for seeding data
     *
     * @param categoryId the new categoryId (long) of the category
     */
    public void setCategoryId(long categoryId) {
        this.categoryId = categoryId;
    }

    /**
     * Getter for name
     *
     * @return the name (String) of the category
     */
    public String getName() {
        return name;
    }

    /**
     * Setter for item name
     *
     * @param name (string) of the item
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for the list of subcategories associated with this category
     *
     * @return the list of subcategories (List<Subcategory>) for this category
     */
    public List<Subcategory> getSubcategoryList() {
        return subcategoryList;
    }

    /**
     * Setter for list of subcategories for this category
     *
     * @param subcategoryList the new list of subcategories (List<Subcategory>) for this category
     */
    public void setSubcategoryList(List<Subcategory> subcategoryList) {
        this.subcategoryList = subcategoryList;
    }
}
