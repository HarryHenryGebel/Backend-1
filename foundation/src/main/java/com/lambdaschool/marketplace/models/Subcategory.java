package com.lambdaschool.marketplace.models;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.*;

/**
 * The entity allowing interaction with the subcategory table
 */
@Entity
@Table(name = "subcategories")
public class Subcategory extends Auditable {
  /**
   * The primary key (long) of the items table.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.AUTO)
  private long subcategoryId;

  /**
   * Item name. Cannot be null.
   */
  @Column(nullable = false)
  private String name;

  @OneToMany(
    mappedBy = "product",
    cascade = CascadeType.ALL,
    orphanRemoval = true
  )
  @JsonIgnoreProperties(value = "product", allowSetters = true)
  private List<Product> productList = new ArrayList<>();

  @ManyToOne
  @JoinColumn(name = "categoryId", nullable = false)
  @JsonIgnoreProperties(value = "subcategoryList", allowSetters = true)
  private Category category;

  /**
   * Default constructor used primarily by the JPA.
   */
  public Subcategory() {}

  /**
   * Give the params, create a new subcategory object
   * <p>
   * subcategoryId is autogenerated
   *
   * @param name The name (String) of the category
   */
  public Subcategory(String name) {
    this.name = name;
  }

  /**
   * Getter for subcategoryId
   *
   * @return the subcategoryId (long) of the subcategory
   */
  public long getSubcategoryId() {
    return subcategoryId;
  }

  /**
   * Setter for subcategoryId. Used primary for seeding data
   *
   * @param subcategoryId the new subcategoryId (long) of the subcategory
   */
  public void setSubcategoryId(long subcategoryId) {
    this.subcategoryId = subcategoryId;
  }

  /**
   * Getter for name
   *
   * @return the name (String) of the subcategory
   */
  public String getName() {
    return name;
  }

  /**
   * Setter for item name
   *
   * @param name (string) of the subcategory
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Getter for the list of products associated with this subcategory
   *
   * @return the list of products (List<Product>) for this subcategory
   */
  public List<Product> getProductList() {
    return productList;
  }

  /**
   * Setter for list of products for this category
   *
   * @param productList the new list of subcategories (List<productList>) for this subcategory
   */
  public void setProductList(List<Product> productList) {
    this.productList = productList;
  }

  /**
   * Getter for category
   * @return returns to category associated with this subcategory
   */
  public Category getCategory() {
    return category;
  }

  /**
   * Setter for category
   * @param category the category object associated with this subcategory
   */
  public void setCategory(Category category) {
    this.category = category;
  }
}
